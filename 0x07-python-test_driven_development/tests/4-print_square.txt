=============================
Testing 4-print_square Module
=============================

Usage
=====
    `print_square(...)` - prints a square with the character #.

Tests
=====

importing the module:
        >>> print_square = __import__('4-print_square').print_square

checking the documentation for the module:
        >>> Mdoc = __import__('4-print_square').__doc__
        >>> len(Mdoc) > 0
        True

checking the documentation for the function
        >>> Mdoc = __import__('4-print_square').print_square.__doc__
        >>> len(Mdoc) > 0
        True

cheking for valid inputs:
        >>> print_square(3)
        ###
        ###
        ###
        >>> print_square(1)
        #

checking for invalid inputs:
        >>> print_square(-1)
        Traceback (most recent call last):
        ValueError: size must be >= 0
        >>> print_square(1.5)
        Traceback (most recent call last):
        TypeError: size must be an integer
        >>> print_square(-20.1)
        Traceback (most recent call last):
        TypeError: size must be an integer
        >>> print_square(None)
        Traceback (most recent call last):
        TypeError: size must be an integer
        >>> print_square("hello")
        Traceback (most recent call last):
        TypeError: size must be an integer
        >>> print_square(float('inf'))
        Traceback (most recent call last):
        TypeError: size must be an integer
        >>> print_square(float('nan'))
        Traceback (most recent call last):
        TypeError: size must be an integer

checking for empty call:
        >>> print_square()
        Traceback (most recent call last):
        TypeError: print_square() missing 1 required positional argument: 'size'

checking for for more than one arg:
        >>> print_square(5, 7)
        Traceback (most recent call last):
        TypeError: print_square() takes 1 positional argument but 2 were given
